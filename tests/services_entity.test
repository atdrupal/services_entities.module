<?php

/**
 * Test resources on the Generic controller, using a test entity type.
 */
class ServicesEntityGenericEntityResource extends ServicesWebTestCase {

  /**
   * The user for the test.
   */
  protected $privilegedUser;

  /**
   * The Services endpoint config object.
   */
  protected $endpoint = NULL;

  /**
   * The resource controller class to use.
   *
   * This is assigned to the system variable by setUp().
   */
  protected $services_entity_resource_class = 'ServicesEntityResourceController';

  /**
   * Implements getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => 'Test Entity Generic Resource',
      'description' => "Test resources using the generic resource controller, with a test entity type.",
      'group' => 'Services Entity',
    );
  }

  /**
   * Implements setUp().
   */
  public function setUp() {
    parent::setUp(
      'ctools',
      'services',
      'rest_server',
      'entity',
      'services_entity',
      // Our test module which provides our test entity type.
      'services_entity_test'
    );
    // Set up endpoint.
    $this->endpoint = $this->saveNewEndpoint();
    // When https://drupal.org/node/2089445 is fixed, change this to:
    // $this->endpoint = $this->saveNewEndpoint(array('entity_services_entity_test'));

    $this->resource_path = $this->endpoint->path . '/entity_services_entity_test';

    // Create and log in our privileged user.
    $this->privilegedUser = $this->drupalCreateUser(array(
      // Let this user access all services.
      'administer services',
    ));

    // Set the resource class to use.
    variable_set('services_entity_resource_class', $this->services_entity_resource_class);
  }

  /**
   * Test 'Retrieve' service.
   */
  public function testEntityRetrieve() {
    $this->drupalLogin($this->privilegedUser);

    // Try getting an entity that doesn't exist.
    $responseArray = $this->servicesGet($this->resource_path . '/42');
    $this->assertTrue($responseArray['code'] == '404', 'Retrieval of a non-existent entity returns a 404.');

    // Create an entity to retrieve.
    $entity = entity_create('services_entity_test', array(
      'type' => 'alpha',
      'name' => $this->randomString(),
      'uid' => $this->privilegedUser->uid,
    ));
    $wrapper = entity_metadata_wrapper('services_entity_test', $entity);

    // Set a field value.
    $test_text_value = $this->randomString();
    $wrapper->field_test_text_alpha->set($test_text_value);

    $entity->save();

    $this->drupalGet($this->resource_path . '/' . $entity->eid);

    $response = $this->servicesGet($this->endpoint->path . '/entity_services_entity_test/' . $entity->eid);
    $retrieved_entity_data = $response['body'];

    // Check values on the retrieved entity data.
    $this->assertEqual($entity->name, $retrieved_entity_data->name, 'Retrieved entity has the name property correctly set.');
    $this->assertEqual($test_text_value, $retrieved_entity_data->field_test_text_alpha['und'][0]['value'], 'Retrieved entity has the field value correctly set.');
  }

  /**
   * Test 'Create' service.
   */
  public function testEntityCreate() {
    $this->drupalLogin($this->privilegedUser);

    // An array of entity data to pass to the service to create an entity.
    $entity_data = array(
      'type' => 'alpha',
      'name' => $this->randomString(),
      'uid' => $this->privilegedUser->uid,
    );
    $test_text_value = $this->randomString();
    $entity_data['field_test_text_alpha']['und'][0]['value'] = $test_text_value;

    // Create the entity using the service.
    $response = $this->servicesPost($this->resource_path, $entity_data);

    // We get the new entity returned to us.
    $returned_entity = $response['body'];
    $new_entity_id = $returned_entity->eid;

    // Load the entity from the DB, using the entity ID from the response we
    // got back from the service.
    $entity = entity_load_single('services_entity_test', $new_entity_id);
    $wrapper = entity_metadata_wrapper('services_entity_test', $entity);

    $this->assertEqual($entity->name, $entity_data['name'], 'Created entity has the name property correctly set.');
    $this->assertEqual($wrapper->field_test_text_alpha->raw(), $test_text_value, 'Created entity has the text field value correctly set.');
  }

  /**
   * Test 'Update' service.
   */
  public function testEntityUpdate() {
    // Create an entity to update.
    $original_entity_data = array(
      'type' => 'alpha',
      'name' => $this->randomString(),
      'uid' => $this->privilegedUser->uid,
    );
    $original_entity = entity_create('services_entity_test', $original_entity_data);
    $original_entity_wrapper = entity_metadata_wrapper('services_entity_test', $original_entity);

    // Set a field value.
    $original_entity_wrapper->field_test_text_alpha->set( $this->randomString());

    $original_entity->save();

    $this->drupalLogin($this->privilegedUser);

    // Build an array of data to update to the entity.
    $update_entity_data = $original_entity_data;
    // We have to add the entity id.
    $update_entity_data['eid'] = $original_entity->eid;
    // Change the name.
    $update_entity_data['name'] = $this->randomString();
    // Change the field value.
    $test_text_value = $this->randomString();
    $update_entity_data['field_test_text_alpha']['und'][0]['value'] = $test_text_value;

    // Update the entity using the service.
    $response = $this->servicesPut($this->resource_path . '/' . $original_entity->eid, $update_entity_data);

    // We get the updated entity returned to us.
    $returned_entity = $response['body'];

    // Load the entity from the DB, using the entity ID from the response we
    // got back from the service.
    // Clear the cache first.
    entity_get_controller('services_entity_test')->resetCache();
    $updated_entity = entity_load_single('services_entity_test', $original_entity->eid);
    $updated_entity_wrapper = entity_metadata_wrapper('services_entity_test', $updated_entity);

    $this->assertEqual($update_entity_data['name'], $updated_entity->name, 'Name property was changed on the updated entity.');
    $this->assertEqual($test_text_value, $updated_entity_wrapper->field_test_text_alpha->raw(), 'Field value was changed on the updated entity.');
  }

  /**
   * Test 'Delete' service.
   */
  public function testEntityDelete() {
    // Create an entity to delete.
    $entity_data = array(
      'type' => 'alpha',
      'name' => $this->randomString(),
      'uid' => $this->privilegedUser->uid,
      // TODO: FieldAPI field values.
    );
    $entity = entity_create('services_entity_test', $entity_data);
    $entity->save();

    $response = $this->servicesDelete($this->resource_path . '/' . $entity->eid);

    // Load the entity from the DB to check it's been deleted.
    // Clear the cache first.
    entity_get_controller('services_entity_test')->resetCache();
    $deleted_entity = entity_load_single('services_entity_test', $entity->eid);

    $this->assertFalse($deleted_entity, 'The entity has been deleted.');
  }

  /**
   * Need to override this :(
   *
   * @todo: Remove when https://drupal.org/node/2089445 is fixed.
   */
  public function saveNewEndpoint() {
    $edit = $this->populateEndpointFAPI() ;

    $edit['path'] = 'endpoint';
    $edit['title'] = 'WT??';

    $endpoint = new stdClass;
    $endpoint->disabled = FALSE; /* Edit this to true to make a default endpoint disabled initially */
    $endpoint->api_version = 3;
    $endpoint->name = $edit['name'];
    $endpoint->title = $edit['title'];
    $endpoint->server = $edit['server'];
    $endpoint->path = $edit['path'];
    $endpoint->authentication = array(
      'services' => 'services',
    );
    $endpoint->server_settings = array(
      'formatters' => array(
        'json' => TRUE,
        'bencode' => TRUE,
        'rss' => TRUE,
        'plist' => TRUE,
        'xmlplist' => TRUE,
        'php' => TRUE,
        'yaml' => TRUE,
        'jsonp' => FALSE,
        'xml' => FALSE,
      ),
      'parsers' => array(
        'application/x-yaml' => TRUE,
        'application/json' => TRUE,
        'application/vnd.php.serialized' => TRUE,
        'application/plist' => TRUE,
        'application/plist+xml' => TRUE,
        'application/x-www-form-urlencoded' => TRUE,
      ),
    );
    $endpoint->resources = array(
      'system' => array(
        'alias' => '',
        'actions' => array(
          'connect' => array(
            'enabled' => 1,
          ),
          'get_variable' => array(
            'enabled' => 1,
          ),
          'set_variable' => array(
            'enabled' => 1,
          ),
        ),
      ),
      'user' => array(
        'alias' => '',
        'operations' => array(
          'create' => array(
            'enabled' => 1,
          ),
          'retrieve' => array(
            'enabled' => 1,
          ),
          'update' => array(
            'enabled' => 1,
          ),
          'delete' => array(
            'enabled' => 1,
          ),
          'index' => array(
            'enabled' => 1,
          ),
        ),
        'actions' => array(
          'login' => array(
            'enabled' => 1,
          ),
          'logout' => array(
            'enabled' => 1,
          ),
        ),
      ),
      'entity_services_entity_test' => array(
        'operations' => array(
          'retrieve' => array(
            'enabled' => 1,
          ),
          'create' => array(
            'enabled' => 1,
          ),
          'update' => array(
            'enabled' => 1,
          ),
          'delete' => array(
            'enabled' => 1,
          ),
          'index' => array(
            'enabled' => 1,
          ),
        ),
      ),
    );
    $endpoint->debug = 1;
    $endpoint->export_type = FALSE;
    services_endpoint_save($endpoint);
    $endpoint = services_endpoint_load($endpoint->name);

    $this->assertTrue($endpoint->name == $edit['name'], 'Endpoint successfully created');
    return $endpoint;
  }

}
